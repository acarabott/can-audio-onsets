#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('can:server');
var http = require('http');
const WebSocket = require('ws');
const osc = require('osc');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var wss = new WebSocket.Server({
  server,
  clientTracking: true
});

wss.on('connection', function connection(ws) {
  ws.send(0);
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const oscUDPPort = new osc.UDPPort({
  localAddress: "127.0.0.1",
  localPort: 6666
});

let number = 0;
const actions = {
  '/increase': (cur, val) => cur + val,
  '/decrease': (cur, val) => cur - val,
  '/set': (cur, val) => val
};

oscUDPPort.on('message', msg => {
  if (!actions.hasOwnProperty(msg.address)) {
    console.log('no matching action');
    return;
  }
  console.log(msg);
  number = actions[msg.address](number, msg.args[0]);
  wss.clients.forEach(client => client.send(number));
});

oscUDPPort.on('error', err => console.log(err));

oscUDPPort.open();
